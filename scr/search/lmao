/*else {
            // G·ª≠i n·ªôi dung b√†i t·∫≠p cho Python x·ª≠ l√Ω
            try {
                const results = await sendToPython(text);
                const predictedLabel = results[0].predicted_label.toLowerCase();
                let responseMessage;

                if (predictedLabel.includes('t·ªâ l·ªá ph·∫ßn trƒÉm') || predictedLabel.includes('ph∆∞∆°ng tr√¨nh') || predictedLabel.includes('l·∫≠p h·ªá ph∆∞∆°ng tr√¨nh')) {

                    responseMessage = predictedLabel;
                    responseMessage = 'C·∫£m ∆°n b·∫°n ƒë√¢y l√† d·∫°ng ' + predictedLabel + ' B·∫°n c·∫ßn t·∫°o bao nhi√™u b√†i?üòÖ';
                    isCreatingExercise = false;
                    isConfirmingQuantity = true;
                } else {
                    responseMessage = `Server: K·∫øt qu·∫£ d·ª± ƒëo√°n t·ª´ b√†i t·∫≠p: ${predictedLabel}`;
                    isCreatingExercise = false; // K·∫øt th√∫c qu√° tr√¨nh t·∫°o b√†i t·∫≠p
                }

                return res.json({ messages: Array(numberOfReplies).fill(responseMessage) });
            } catch (error) {
                console.error('Error calling Python script:', error);
                return res.status(500).json({ messages: [`Server: ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω b√†i t·∫≠p.`], error: error.message });
            }
        }
        */